MySQL is a Relational Database Management System, or RDBMS. This means it stores data in tables and creates relationships between the data in the different tables.

We use the Structured Query Language (SQL) to interact with MySQL. SQL is made up of statements and commands sent to the server individually, with results sent back to the client.


These are the commands that create and define structures within MySQL.
Data Definition Language (DDL)
Data Control Language (DCL) commands.

Later, we will get into Data Manipulation Language (DML) and Data Query Language (DQL).

Check the status of the server
mysql.server status

Start the server
mysql.server start


MySQL server understands Structured Query Language (SQL) commands, stores and organizes the data on disk, and users that can connect and manipulate the data.

MySQL client that connects to the server for us, sends our commands to the server, and displays the data on screen.

This instructs the MySQL client to connect to the MySQL server using the specified user, and a password. After successfully logging in, we should be greeted by the server:

We can connect to the MySQL server with the following command:
mysql -u USERNAME -p

Finding current user
mysql> SELECT current_user;
+----------------+
| current_user   |
+----------------+
| root@localhost |
+----------------+
1 row in set (0.00 sec)



Listing Users
SELECT user, host FROM mysql.user;
+-------------+-----------+
| user        | host      |
+-------------+-----------+
| mysql.sys   | localhost |
| root        | localhost |


Creating a User
To create a new MySQL user we use the command CREATE USER.
We must then specify a new username and hostname for that user to connect from.
A username & hostname combination is defined like 'username'@'hostname'.

So, if we wanted to create a user named billy who could connect from localhost with the password billysSecretP@ass123, the command would be:

CREATE USER 'billy'@'localhost' IDENTIFIED BY 'billysSecretP@ass123';
CREATE USER 'sally'@'192.168.77.1' IDENTIFIED BY 'passwordForSally321';

Privileges
Creating a user is only half of the process. On its own, a user has no "privileges", meaning it does not have the permission to do anything within the MySQL server. To address that, we must grant the user privileges.

GRANT ALL ON *.* TO 'billy'@'localhost';
GRANT SELECT ON *.* TO 'read_only'@'localhost';
GRANT SELECT, INSERT, UPDATE, DELETE ON sally_db.sallys_table TO 'sally'@'localhost';
GRANT CREATE, ALTER, INSERT, DROP ON office_db.* TO 'office_user'@'localhost';

Lastly, what about the permission to grant privileges themselves? To accomplish this, we add WITH GRANT OPTION to the end of our GRANT command. Going back to billy, if we wanted him to be able to grant these privileges to other users, we would modify our previous command slightly:

GRANT ALL ON *.* TO 'billy'@'localhost' WITH GRANT OPTION;

Dropping a User
DROP USER 'sally'@'localhost';

Creating a Database
CREATE DATABASE database_name;

The IF NOT EXISTS clause will skip the "create database" command if the database has already been created.
CREATE DATABASE IF NOT EXISTS database_name;

Listing Databases
SHOW DATABASES;

Selecting a Database
USE database_name;

Referring to Other Databases
At times it may be necessary to refer to a table or object in a separate database. Or, if you have just connected to a MySQL server, you may not have any database selected. To do this, you can use the syntax database_name.table_name.

Showing Current Database
SELECT database();

Inspecting a Database
SHOW CREATE DATABASE database_name;

Deleting a Database
DROP DATABASE database_name;
DROP DATABASE IF EXISTS database_name; // avoid problems

-- export database (backup)
mysqldump -u username -p dbname > dbexport.sql

-- import database (recover)
mysql -u username -p dbname < dbexport.sql

-- Or you can use the myPhpAdmin

-- Reference: https://www.a2hosting.com/kb/developer-corner/mysql/import-and-export-a-mysql-database#MySQL-Import-DatabaseMethod-2.3A-Use-the-emmysqlem-program


Database vs. Schema
Within MySQL, "database" and "schema" mean the same thing and can be used interchangeably.

Application Specific Databases (and Users)
When you begin developing an application backed by a database, you must decide how to organize that information within your database. Most web applications can be encapsulated in a single database. Because of this, we will usually pair our application's database with a dedicated user. This user would be granted full control of just that database.

Data types
MySQL, and most database systems, are different: they are statically typed.

Numeric Types
INT — Any number without a decimal point.
FLOAT — A number with decimal values, but which can sometimes be less accurate. You can use DOUBLE instead to increase the precision.
DECIMAL(length, precision) — A precise decimal number. Decimal columns must be defined with a length and a precision; length is the total number of digits that will be stored for a value, and precision is the number of digits after the decimal place. For example, a column defined as DECIMAL(4,2) would allow four digits total: two before the decimal point and two after. So the values 99.99, 4.50, and -88.10 would be allowed, but not 100.00 or 7.134. Decimal columns are perfect for storing monetary values.

Unsigned
When we are declaring our numeric columns, we can specify that the values are UNSIGNED. This allows us to potentially store larger numbers in a column but only positive values. For example, a normal INT column can store numbers from -2,147,483,648 to 2,147,483,647, whereas an INT UNSIGNED column can store 0 to 4,294,967,295.

Boolean
MySQL has no native support for boolean values. Instead, it uses a TINYINT data type that goes from -128 to 127 and treats 0 as false and 1 as true.

String Types
Like other languages, MySQL also has string types, although with a few caveats. Below are the most common string data types in MySQL and how to use them.

CHAR(length) — A string with a fixed number of characters, where length can be from 1 to 255. If a string shorter than length is stored in a CHAR column then the value is padded with empty space to take up the full size. If you try to store a string longer than length, then an error occurs. CHAR column types are ideal for values where you know the length and it is constant, like a state abbreviation CHAR(2), zip code CHAR(5), or phone number CHAR(10).
VARCHAR(length) — For strings where the length could vary up to some maximum number. VARCHAR columns are probably the most common type of column you will use in your database tables. Although VARCHAR lengths can go up to 65,535, if you need more than 255 characters consider using TEXT instead.
TEXT — A large block of characters that can be any length. It may be tempting to just throw everything in TEXT columns and not worry about lengths, but this is a very bad idea! There are some major technical limitations to TEXT and they can cause serious performance issues if they are abused. Only use TEXT columns for very large blocks of text, like the full text of an article, or the pages of a book.
We will use single quotes (') to indicate string values.

Date Types
Dates and times are deceptively complex data types. Thankfully, MySQL includes several ways of representing them.

DATE — A date value without any time. Typically MySQL displays dates as YYYY-MM-DD.
TIME — A time down to the seconds. MySQL uses 24-hour times.
DATETIME — A combined date and time value. DATETIME does not store any timezone information and will typically display information in the format YYYY-MM-DD HH:MM:SS.

Null
In MySQL, NULL can be thought of as the absence of value.

Creating Tables
CREATE TABLE table_name (
    column1_name data_type,
    column2_name data_type,
    ...
);
example
CREATE TABLE quotes (
    author_first_name VARCHAR(50),
    author_last_name  VARCHAR(100) NOT NULL,
    content TEXT NOT NULL
);

Primary Keys

Primary keys solve this problem; a primary key is a guaranteed way to uniquely identify a single row in a table. A primary key is a special type of column with the following rules:

Each value must be unique.
They cannot be NULL.
There can only be one primary key in a table.
CREATE TABLE quotes (
    id INT UNSIGNED NOT NULL AUTO_INCREMENT,
    author_first_name VARCHAR(50),
    author_last_name  VARCHAR(100) NOT NULL,
    content TEXT NOT NULL,
    PRIMARY KEY (id)
);

Default Values
For any given column we can specify a default value for it in our table definition.
CREATE TABLE quotes (
    id INT UNSIGNED NOT NULL AUTO_INCREMENT,
    author_first_name VARCHAR(50) DEFAULT 'NONE',
    author_last_name  VARCHAR(100) NOT NULL,
    content TEXT NOT NULL,
    PRIMARY KEY (id)
);

Showing Tables
SHOW TABLES;

Describing Tables
DESCRIBE quotes;

MySQL can also display the original command used to create a table by using SHOW CREATE TABLE.
SHOW CREATE TABLE quotes\G

Dropping Tables
If we need to get rid of a table we use the DROP TABLE command.
DROP TABLE quotes;

SQL Scripts
Creating even a simple table is several lines long, and if a single typo is made it can be frustrating to have to recall the previous command and step through it character by character to find the typo. To simplify this, we can create our SQL commands in a script file and then instruct the MySQL command line client to run those commands.

mysql -u USERNAME -p -t < filename.sql

Insert
The commands to add new rows to a table is INSERT. Its basic structure looks like the following:

INSERT INTO table_name (field1, field2, ...)
VALUES ('value1', 'value2', ...);

Select
We use SELECT to find and return rows from a table. SELECT is a deceptively powerful statement and we will be learning a lot more about its capabilities in the later sections, but for right now let's focus on its basic syntax:

SELECT column1, column2, ... FROM table_name;

Where Clause
As we can see, SELECT will return all the rows in our table. If we want to change what data is being returned, we need to narrow down our selection. We can do this by using a WHERE clause. WHERE allows you to specify a condition that must be true for a given row to be displayed. The basic syntax looks like:


SELECT column1, column2, ...
FROM table_name
WHERE column_name = 'value';


Miscellaneous Output
Sometimes it may be useful to output arbitrary data from our SQL scripts. We can do this by selecting an arbitrary string and giving it a name like so:

SELECT 'I am output!' AS 'Info';

Update
The command to modify existing data in a table is UPDATE. Unlike INSERT, update only works with existing records; it will not add new rows to any table.

The basic syntax for an UPDATE statement is:
UPDATE table_name
SET column1 = 'value1', column2 = 'value2', ...
WHERE columnA = 'valueA';

Delete
To remove records from a table, we use the DELETE statement. The basic syntax for delete rows:
DELETE FROM table_name WHERE column_name = 'value';

Caution
The DELETE query is exceptionally dangerous—there is no confirmation and there is no going back. It is up to you as a developer to make sure you are only deleting the records you want to. A good rule of thumb is to:
Always write your WHERE condition first.
Whenever possible, DELETE using the table's primary key.

Truncate
Sometimes you do not want to just remove a handful of records, but all the records from a table. For that, SQL also has a TRUNCATE command:
TRUNCATE table_name;